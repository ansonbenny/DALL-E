import React, { useState, useReducer } from 'react'
import { useNavigate } from 'react-router-dom'
import axios from 'axios'

import { preview } from '../assets'
import { getRandomPrompt } from '../utils'
import { FormFeild, Loader } from '../components'

const reducer = (loadStates, dispatch) => {
  switch (dispatch.type) {
    case 'loading':
      return { loading: dispatch.status }
    case 'generatingImg':
      return { generatingImg: dispatch.status }
    default:
      return loadStates
  }
}

const CreatePost = () => {
  const navigate = useNavigate()

  const [formData, setFormData] = useState({
    name: '',
    prompt: '',
    photo: ''
  })

  const [loadStates, dispatch] = useReducer(reducer, {
    generatingImg: false,
    loading: false
  })

  const generateImg = async () => {
    if (formData.prompt) {
      try {
        dispatch({ type: 'generatingImg', status: true })
        const response = await axios.post('http://localhost:5000/api/v1/dalle', {
          prompt: formData.prompt
        })

        setFormData({
          ...formData,
          photo: `data:image/jpeg;base64,${response['data'].image}`
        })
      } catch (error) {
        alert(error)
      } finally {
        dispatch({ type: 'generatingImg', status: false })
      }
    } else {
      alert("Please enter the prompt")
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    if (formData.prompt && formData.photo) {
      if (formData.name) {
        try {
          dispatch({ type: 'loading', status: true })

          let response = await axios.post('http://localhost:5000/api/v1/post', formData)

          navigate('/')
        } catch (error) {
          alert(error)
        } finally {
          dispatch({ type: 'loading', status: false })
        }
      } else {
        alert("Please enter name")
      }
    } else {
      alert("Please enter the prompt and generate an image")
    }
  }

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    })
  }

  const handleSurpriseMe = () => {
    const randomPrompt = getRandomPrompt(formData.prompt)
    setFormData({
      ...formData,
      prompt: randomPrompt
    })
  }

  return (
    <section>
      <div>
        <h1 className='font-extrabold text-[#222328] text-[32px]' >
          Create
        </h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[500px]'>
          Create through a collection of imaginative and visually stunning images generated by DALL-E AI
        </p>
      </div>

      <form className='mt-16 max-w-3xl' onSubmit={handleSubmit}>
        <div className="flex flex-col gap-5">
          <FormFeild
            labelName="Your Name"
            type="text"
            name="name"
            placeholder="Anson Benny"
            value={formData.name}
            handleChange={handleChange}
          />

          <FormFeild
            labelName="Prompt"
            type="text"
            name="prompt"
            placeholder="panda mad scientist mixing sparkling chemicals, digital art"
            value={formData.prompt}
            handleChange={handleChange}
            isSurpriseMe
            handleSurpriseMe={handleSurpriseMe}
          />

          <div className='relative bg-gray-50 border border-gray-300 text-gray-900
          text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64
          flex justify-center items-center' >
            {formData.photo ? (
              <img
                src={formData.photo}
                alt={formData.prompt}
                className='w-full h-full object-contain'
              />
            ) : (
              <img
                src={preview}
                alt='preview'
                className='w-9/12 h-9/12 object-contain opacity-40'
              />
            )}

            {
              loadStates.generatingImg && (
                <div className='absolute inset-0 z-0 flex justify-center items-center
                bg-[rgba(0,0,0,0.5)] rounded-lg' >
                  <Loader />
                </div>
              )
            }

          </div>
        </div>

        <div className='mt-5 flex gap-5'>
          <button
            type='button'
            onClick={generateImg}
            className="text-white bg-green-700 font-medium rounded-md
            text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {
              loadStates.generateImg ? 'Generating...' : 'Generate'
            }
          </button>
        </div>

        <div className="mt-10">
          <p className='mt-2 text-[#666e75] text-[14px]'>One you have created the image you want, you can share it with others in the community</p>

          <button
            type='submit'
            className='mt-3 text-white bg-[#6469ff] font-medium rounded-md
            text-sm w-full sm:w-auto px-5 py-2.5 text-center'
          >
            {loadStates.loading ? 'Sharing..' : 'Share with the community'}
          </button>
        </div>
      </form>
    </section>
  )
}

export default CreatePost